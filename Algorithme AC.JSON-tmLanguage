// [PackageDev] target_format: plist, ext: tmLanguage
{ "name": "Algorithme AC",
  "scopeName": "source.algo",
  "fileTypes": ["algo"],
  "uuid": "22bc32ae-456c-4537-b828-e45d2a0878c3",

  "patterns": [
    { "match": "//.*",
      "name": "comment.line.double-slash.algo",
      "comment": "Un commentaire sur une seule ligne"
    },
    {
      "name": "comment.block.algo",
      "begin": "\\/\\*" ,
      "end": "\\*\\/",
      "comment": "Un commentaire sur plusieurs lignes"
    },

    { "match": "\\bvrai\\b|\\bfaux\\b|\\bNULL\\b",
      "name": "constant.language.algo",
      "comment": "Valeurs booléenes définis par le langage"
    },

    { "match": "\\bthis\\b|\\bT\\b|\\bsuper\\b|\\bnouveau\\b",
      "name": "variable.language.algo",
      "comment": "Variables particulières du langage"
    },

    { "match": "\\+|-(?![0-9]*[.]?[0-9]+)|\\*|/|\\bDIV\\b|%|\\^|\\bOU\\b|\\bET\\b|\\bOUX\\b|\\bNON\\b|>|<|>=|<=|=|!=|<>|<-|←|@|↓|&|!",
      "name": "keyword.operator.algo",
      "comment": "Opérateurs disponibles pour le langage"
    },

    { "match": "\\bSINON\\b|\\bSI\\b|\\bFINSI\\b|\\bALORS\\b|\\bFINSELON\\b|\\bSELON\\b|\\bEST\\b|\\bMODIFIE\\b|\\bABSTRAITE\\b",
      "name": "entity.name.function.algo",
      "comment": "Conditions"
    },

    { "match": "\\bPOUR\\b|\\bDE\\b|\\bA\\b|\\bPAS DE\\b|\\bFAIRE\\b|\\bTANTQUE\\b|\\bFINPOUR\\b|\\bFINTANTQUE\\b",
      "name": "keyword.control.algo",
      "comment": "Boucles"
    },

    { "match": "\\b-?[0-9]*[.]?[0-9]+",
      "name": "constant.numeric.algo",
      "comment": "Chiffres et nombres"
    },

    { "match": "CARACTERE ?:|ENTIER ?:|REEL ?:|CHAINE ?:|BOOLEEN ?:",
      "name": "storage.type.algo",
      "comment": "Types de variables"
    },

    { "match": "\\bCARACTERE(?!\\s:)\\b|\\bENTIER(?!\\s:)\\b|\\bREEL(?!\\s:)\\b|\\bCHAINE(?!\\s:)\\b|\\bBOOLEEN(?!\\s:)\\b",
      "name": "storage.modifier.algo",
      "comment": "Types de retour pour les fonctions"
    },

    { "name": "variable.complex.algo",
      "begin": "(TABLEAU)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN)(?:>)((\\[(?:\\w*)\\])+)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "5": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Tableaux"
    },

    { "name": "variable.complex.algo",
      "begin": "(POINTEUR)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN)(?:>)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "3": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Pointeurs"
    },

    { "match": "\\bALGORITHME(?:.*)|\\bCONSTANTE\\b|\\bVARIABLE\\b|\\bFONCTION\\b|\\bFINFONCTION\\b|\\bDEBUT\\b|\\bFIN\\b|\\bRetourne\\b|\\bCLASSE\\b|\\bFINCLASSE\\b|\\bHERITE\\b|\\bIMPLEMENTE\\b|\\bCONSTRUCTEUR\\b|\\bFINCONSTRUCTEUR\\b|\\bINTERFACE\\b|\\bFININTERFACE\\b",
      "name": "keyword.control.algo",
      "comment": "Mots clés"
    },

    { "match": "([A-Z]{1}[a-z]+)+ ?:",
      "name": "storage.type.algo",
      "comment": "Types d'objets (nom de la classe)"
    },

    { "name": "variable.complex.algo",
      "begin": "(([A-Z]{1}[a-z]+)+)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN|([A-Z]{1}[a-z]*)+)(?:>)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "3": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Conteneurs génériques (piles, files, listes...)"
    },

    { "name": "string.quoted.double.algo",
      "begin": "\"",
      "end": "\""
    }
  ]
}
