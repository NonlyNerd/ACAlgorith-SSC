// [PackageDev] target_format: plist, ext: tmLanguage
{ "name": "Algorithme AC",
  "scopeName": "source.algo",
  "fileTypes": ["algo"],
  "uuid": "22bc32ae-456c-4537-b828-e45d2a0878c3",

  "patterns": [
    { "match": "//.*",
      "name": "comment.line.double-slash.algo",
      "comment": "Un commentaire sur une seule ligne"
    },

    {
      "name": "comment.block.algo",
      "begin": "\\/\\*" ,
      "end": "\\*\\/",
      "comment": "Un commentaire sur plusieurs lignes"
    },

    { "match": "\\b(vrai|faux|NULL)\\b",
      "name": "constant.language.algo",
      "comment": "Valeurs booléenes définis par le langage"
    },

    { "match": "\\b(this|super|nouveau|valeur)\\b",
      "name": "variable.language.algo",
      "comment": "Variables particulières du langage"
    },

    { "match": "\\s(\\+|<-|-|\\*|/|DIV|%|\\^|OU|ET|OUX|NON|>|<|>=|<=|=|!=|<>|←)\\s",
      "name": "keyword.operator.algo",
      "comment": "Opérateurs disponibles pour le langage"
    },

    { "begin": "(NON)?(?: ?\\( ?)?(EOF)",
      "beginCaptures": {
      "1": { "name": "keyword.operator.algo" },
      "2": { "name": "keyword.operator.algo" }
    },
    "end": "",
    "comment": "Utilisation du NON pour le parcours de fichiers"
    },

    {  "name": "keyword.operator.algo",
       "match": "!|@|↓|⬇|&",
       "comment": "Opérateurs disponibles pour le langage"
    },

    { "match": "\\b(SINON|SI|FINSI|ALORS|FINSELON|SELON|FAIRE|EST)\\b",
      "name": "keyword.control.algo",
      "comment": "Conditions"
    },

    { "match": "\\bABSTRAITE\\b|\\bMODIFIE\\b|\\bHERITE\\b|\\bIMPLEMENTE\\b",
      "name": "entity.name.function.algo",
      "comment": "Modifieurs"
    },

    { "match": "\\b(POUR|DE|A|PAS DE|FAIRE|TANTQUE|FINPOUR|FINTANTQUE)\\b",
      "name": "keyword.control.algo",
      "comment": "Boucles"
    },

    { "name": "keyword.control.algo",
      "match": "\\b(DECLARE|CURSEUR|FINDECLARE|OPEN|CLOSE)\\b",
      "comment": "Curseurs. Contient également le mot clef POUR."
    },

    {  "name": "storage.modifier.algo",
       "match": "\\b(PUBLIC|PRIVATE|PROTECTED|INTERNAL|STATIC)\\b",
       "comment": "Modificateurs d'accès"
    },

    {  "name": "entity.name.function.algo",
       "match": "\\b(ACCESSEUR|GET|FINGET|SET|FINSET|FINACCESSEUR)\\b",
       "comment": "Accesseurs"
    },

    { "begin": "(-?)([0-9]*[.]?[0-9]+)",
      "beginCaptures": {
        "1": { "name": "constant.numeric.algo" },
        "2": { "name": "constant.numeric.algo" }
      },
      "end": "",
      "name": "constant.numeric.algo",
      "comment": "Chiffres et nombres"
    },

    { "match": "CARACTERE ?:|ENTIER ?:|REEL ?:|CHAINE ?:|BOOLEEN ?:",
      "name": "storage.type.algo",
      "comment": "Types de variables"
    },

    { "begin": "(FONCTION|ACCESSEUR) (\\b(CARACTERE(?!\\s:)|ENTIER(?!\\s:)|REEL(?!\\s:)|CHAINE(?!\\s:)|BOOLEEN(?!\\s:)|([A-Z]{1}[a-z]*)+)\\b)",
      "beginCaptures": {
        "1": { "name": "entity.name.function.algo" },
        "2": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Types de retour pour les fonctions ou les accesseurs"
    },

    { "name": "variable.complex.algo",
      "begin": "(TABLEAU)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN|([A-Z]{1}[a-z]*)+)(?:>)((\\[(?:\\w*)\\])+)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "5": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Tableaux"
    },

    { "name": "variable.complex.algo",
      "begin": "(POINTEUR)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN)(?:>)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "3": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Pointeurs"
    },

    { "match": "\\b(ALGORITHME(?:.*)|CONSTANTE|VARIABLE|FONCTION|FINFONCTION|DEBUT|FIN|Retourne|CLASSE|FINCLASSE|CONSTRUCTEUR|FINCONSTRUCTEUR|INTERFACE|FININTERFACE)\\b",
      "name": "entity.name.function.algo",
      "comment": "Mots clés"
    },

    { "match": "([A-Z]{1}[a-z]+)+ ?:",
      "name": "storage.type.algo",
      "comment": "Types d'objets (nom de la classe)"
    },

    { "name": "variable.complex.algo",
      "begin": "(([A-Z]{1}[a-z]+)+)(?:<)(CARACTERE|ENTIER|REEL|CHAINE|BOOLEEN|([A-Z]{1}[a-z]*)+)(?:>)( ?:)",
      "beginCaptures": {
        "1": { "name": "storage.type.algo" },
        "2": { "name": "storage.type.algo" },
        "3": { "name": "storage.type.algo" }
      },
      "end": "",
      "comment": "Conteneurs génériques (piles, files, listes...)"
    },

    { "name": "string.quoted.double.algo",
      "begin": "\"",
      "end": "\"",
      "beginCaptures": {
        "0": {"name": "punctuation.definition.string.begin.algo"}
      },
      "endCaptures": {
        "0": {"name": "punctuation.definition.string.end.algo"}
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    },

    { "name": "string.quoted.simple.algo",
      "begin": "'",
      "end": "'",
      "beginCaptures": {
        "0": {"name": "punctuation.definition.character.begin.algo"}
      },
      "endCaptures": {
        "0": {"name": "punctuation.definition.character.end.algo"}
      },
      "patterns": [
        {
          "include": "#string-character-escape"
        }
      ]
    }
  ],
  "repository": {
    "string-character-escape": {
      "name": "constant.character.escape.algo",
      "match": "\\\\(x[0-9A-Fa-f]{2}|.|$)"
    }
  }
}
